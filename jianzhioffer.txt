1.在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
 ```java
public class Solution {
    public boolean Find(int target, int [][] array) {
        int h = array.length;
        int l = array[0].length;
        if(array != null && h > 0 && l > 0){
            int hang = 0;
            int lie = l - 1;
            while(hang < h && lie >= 0){
                if(array[hang][lie] == target){
                    return true;
                }else if(array[hang][lie] < target){
                    hang ++;
                }else{
                    lie --;
                }
            }
        }
        return false;
    }
}
```
 2.请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。

```java
public class Solution {
    public String replaceSpace(StringBuffer str) {
     String string = "";
        for (char c:str.toString().toCharArray()
             ) {
            if(c == ' '){
                string += "%20";
            }else{
                string += c;
            }
        }
        return string;
    }
}
```
3.输入一个链表，按链表从尾到头的顺序返回一个ArrayList。

 ```java
/**
*    public class ListNode {
*        int val;
*        ListNode next = null;
*
*        ListNode(int val) {
*            this.val = val;
*        }
*    }
*
*/
import java.util.*;
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        Stack<Integer> stack = new Stack<>();
        while(listNode != null){
            stack.push(listNode.val);
            listNode = listNode.next;
        }
        ArrayList<Integer> list = new ArrayList<Integer>();
        while(!stack.isEmpty()){
            list.add(stack.pop());
        }
        return list;
    }
}
```
4.输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。

 ```java

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.*;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        if(pre.length < 1){
            return null;
        }
        int rootVal = pre[0];
        int rootIndex = 0;
        for(int i = 0;i < in.length; i++){
            if(in[i] == rootVal){
                rootIndex = i;
                break;
            }
        }
        TreeNode root = new TreeNode(rootVal);
        root.left = reConstructBinaryTree(Arrays.copyOfRange(pre,1,rootIndex+1),Arrays.copyOfRange(in,0,rootIndex));
        root.right = reConstructBinaryTree(Arrays.copyOfRange(pre,rootIndex+1,pre.length),Arrays.copyOfRange(in,rootIndex+1,in.length));
        return root;
    }
    
}
```
5.用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。

 ```java
import java.util.Stack;
public class Solution {
    Stack<Integer> stack1 = new Stack<Integer>();
    Stack<Integer> stack2 = new Stack<Integer>();
    
    public void push(int node) {
        stack1.push(node);
    }
    
    public int pop() {
        while(!stack1.isEmpty()){
            stack2.push(stack1.pop());
        }
        int first = stack2.pop();
        while(!stack2.isEmpty()){
            stack1.push(stack2.pop());
        }
        return first;
    }
}
```
6.把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。
        输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。
        例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。
        NOTE：给出的所有元素都大于0，若数组大小为0，请返回0.

```java
public class Solution {
    public int minNumberInRotateArray(int [] array) {
        if(array.length == 0){
            return 0;
        }
        if(array.length == 1){
            return array[0];
        }
        for(int i = 0; i < array.length - 1;i++){
            if(array[i] > array[i+1]){
                return array[i+1];
            }else{
                if(i == array.length - 2){
                    return array[0];
                }
            }
        }
        return 0;
    }
}
```
7.大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。 n<=39

 ```java
public class Solution {
    public int Fibonacci(int n) {
        if(n<=0){
            return 0;
        }
        if(n == 1 || n == 2){
            return 1;
        }
        int a = 1;
        int b = 1;
        int c = 0;
        for(int i = 3;i <= n;i++){
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
}
```
8.一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。

 ```java
public class Solution {
    public int JumpFloor(int target) {
        if (target <= 0){
            return 0;
        }
        if(target == 1){
            return 1;
        }
        if(target == 2){
            return 2;
        }
        return JumpFloor(target -1) + JumpFloor(target -2);
    }
}
```
9.一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
**解法一**
```java
public class Solution {
    public int JumpFloorII(int target) {
        if(target <= 0){
            return 0;
        }
        if(target == 1){
            return 1;
        }
        return 2 * JumpFloorII(target - 1);
    }
}
```
f(1) = 1
         f(2) = f(2-1) + f(2-2)         //f(2-2) 表示2阶一次跳2阶的次数。
         f(3) = f(3-1) + f(3-2) + f(3-3)
          ...
         f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(n-(n-1)) + f(n-n)
         
 f(n) = f(n-1)+f(n-2)+...+f(n-(n-1)) + f(n-n) =>f(0) + f(1) + f(2) + f(3) + ... + f(n-1)



 f(n-1) = f(0) + f(1)+f(2)+f(3) + ... + f((n-1)-1) =  f(0) + f(1) + f(2) + f(3) + ... + f(n-2)

f(n) = f(0) + f(1) + f(2) + f(3) + ... + f(n-2) +
        f(n-1) = f(n-1) + f(n-1)
  可以得出：
f(n) = 2*f(n-1)

**解法二**
经过计算,发现跳1,2,3,4...级台阶有1,2,4,8...种方法,方法个数为2的台阶个数减一次方.
```java
public class Solution {
    public int JumpFloorII(int target) {
        if(target <= 0){
            return 0;
        }
        if(target == 1){
            return 1;
        }
        return (int)Math.pow(2.,target - 1);
    }
}
```
10.我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？

```java
public class Solution {
    public int RectCover(int target) {
        if (target <= 0){
            return 0;
        }
        if (target == 1){
            return 1;
        }
        if(target == 2){
            return 2;
        }
        return RectCover(target -1) + RectCover(target - 2);
    }
}
```

